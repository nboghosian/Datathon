import streamlit as st
import pandas as pd
import joblib
from modelo import gerar_variaveis_match

#  Carregar modelo e dados
modelo = joblib.load('modelo_xgb_final.pkl')
colunas_modelo = joblib.load('colunas_modelo.pkl')  # üî• As colunas usadas no treino
df_candidatos = pd.read_csv('df_candidatos_tratado.csv')

st.title("üîç Recomenda√ß√£o de Candidatos para Vaga")

# Inputs da vaga

st.subheader("üìÑ Dados da Vaga")

titulo_vaga = st.text_input("T√≠tulo da Vaga")

senioridade = st.selectbox(
    "N√≠vel de Senioridade", 
    ["Estagi√°rio", "Auxiliar", "Assistente", "J√∫nior", "Pleno", "S√™nior", "Especialista", "Coordenador", "Gerente", "Supervisor"]
)

area_atuacao = st.selectbox(
    "√Årea de Atua√ß√£o", 
    ["Desenvolvimento", "Dados", "Governan√ßa", "Relacionamento", "Infraestrutura", 
     "Neg√≥cio/ADM", "Projetos", "Qualidade", "SAP", "Seguran√ßa", "UX", "Outros"]
)

competencias = st.text_area("Compet√™ncias T√©cnicas e Comportamentais")

nivel_academico = st.selectbox(
    "N√≠vel Acad√™mico",
    [
        'Ensino fundamental incompleto', 'Ensino fundamental cursando', 'Ensino fundamental completo',
        'Ensino m√©dio incompleto', 'Ensino m√©dio cursando', 'Ensino m√©dio completo',
        'Ensino t√©cnico incompleto', 'Ensino t√©cnico cursando', 'Ensino t√©cnico completo',
        'Ensino superior incompleto', 'Ensino superior cursando', 'Ensino superior completo',
        'P√≥s gradua√ß√£o incompleto', 'P√≥s gradua√ß√£o cursando', 'P√≥s gradua√ß√£o completo',
        'Mestrado cursando', 'Mestrado incompleto', 'Mestrado completo',
        'Doutorado cursando', 'Doutorado incompleto', 'Doutorado completo'
    ]
)

nivel_ingles = st.selectbox(
    "N√≠vel de Ingl√™s", 
    ["B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"]
)

local_vaga = st.text_input("Local da vaga (Cidade, Estado)")


#  Montar dicion√°rio da vaga
vaga = {
    'titulo_vaga': titulo_vaga,
    'competencia_tecnicas_e_comportamentais': competencias,
    'nivel_academico_y': nivel_academico,
    'nivel_ingles_y': nivel_ingles,
    'senioridade_y': senioridade,
    'area_atuacao_grupo': area_atuacao,
    'local_vaga': local_vaga
}


# A√ß√£o: Buscar candidatos
if st.button("üîç Buscar Candidatos"):
    # Gerar vari√°veis de match
    df_match = gerar_variaveis_match(df_candidatos, vaga)

    #  Separar vari√°veis num√©ricas e matches
    X_numericas = df_match[[
        'match_competencias_v3',
        'match_titulo_vaga_perfil_v2',
        'match_local',
        'match_senioridade_aceitavel',
        'delta_ingles',
        'delta_academico',
        'delta_senioridade'
    ]]

    #  Selecionar colunas dummies (tipo e √°rea)
    colunas_dummies = [col for col in df_match.columns if (
        col.startswith('tipo_contratacao_') or col.startswith('area_atuacao_grupo_')
    )]

    X_dummies = df_match[colunas_dummies]

    # Concatenar tudo
    X = pd.concat([X_numericas, X_dummies], axis=1)

    # Reindexar para garantir que as colunas est√£o iguais ao treinamento
    X = X.reindex(columns=colunas_modelo, fill_value=0)


    # Fazer predi√ß√£o
    proba = modelo.predict_proba(X)[:, 1]
    df_match['prob_contratacao'] = proba

    #  Ordenar pelos mais prov√°veis
    resultado = df_match.sort_values(by='prob_contratacao', ascending=False)


    #  Mostrar resultado
    st.subheader("‚úÖ Candidatos recomendados:")
    st.dataframe(
        resultado[['codigo_candidato', 'titulo_profissional', 'prob_contratacao']].reset_index(drop=True)
    )


import streamlit as st
import pandas as pd
import joblib
from modelo import gerar_variaveis_match

# =========================
# Configura√ß√£o da p√°gina
# =========================
st.set_page_config(page_title="Recomenda√ß√£o de Candidatos", layout="wide")

# =========================
# CSS para tema escuro nas abas
# =========================
st.markdown(
    """
    <style>
    body {
        background-color: black;
        color: white;
    }
    .stApp {
        background-color: black;
        color: white;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: #000000;
        color: white;
        border-radius: 5px;
        padding: 8px;
        margin-right: 4px;
        font-weight: bold;
    }
    .stTabs [aria-selected="true"] {
        background-color: #333333;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# =========================
# Cabe√ßalho com Imagem
# =========================
st.image("recrutamento.jpg", use_column_width=True)

# =========================
# Carregar modelo e dados
# =========================
modelo = joblib.load('modelo_xgb_final.pkl')
colunas_modelo = joblib.load('colunas_modelo.pkl')
df_candidatos = pd.read_csv('df_candidatos_tratado.csv')

# =========================
# Cria√ß√£o das Abas
# =========================
abas = st.tabs(["üìë Introdu√ß√£o e Metodologia", "üîç Recomenda√ß√£o de Candidatos"])

# =========================
# üìë Aba 1 - Introdu√ß√£o
# =========================
with abas[0]:
    st.markdown("""
    # üìë Introdu√ß√£o e Metodologia

    ## üîç Introdu√ß√£o

    Este projeto foi desenvolvido para otimizar o processo de recrutamento na **Decision**, utilizando **Machine Learning** e uma aplica√ß√£o interativa em **Streamlit**.

    O objetivo √© fornecer recomenda√ß√µes assertivas para o time de recrutamento, levando em conta:
    - Compet√™ncias t√©cnicas
    - Similaridade de t√≠tulo profissional
    - Ader√™ncia em localiza√ß√£o (cidade/estado)
    - Forma√ß√£o acad√™mica
    - Senioridade
    - N√≠vel de ingl√™s

    ## üöÄ Metodologia

    1Ô∏è‚É£ Coleta e tratamento dos dados hist√≥ricos da Decision  
    2Ô∏è‚É£ Engenharia de features de "match" (local, acad√™mico, ingl√™s, t√≠tulo, compet√™ncias, senioridade)  
    3Ô∏è‚É£ Processamento de linguagem natural (TF-IDF) para comparar textos  
    4Ô∏è‚É£ Modelagem com **XGBoost**, al√©m de Random Forest e Regress√£o Log√≠stica para compara√ß√£o  
    5Ô∏è‚É£ Deploy em aplicativo web interativo usando **Streamlit**

    ## üèÅ Conclus√£o

    A aplica√ß√£o permite uma triagem mais √°gil, precisa e objetiva, auxiliando o RH na tomada de decis√£o baseada em dados.
    """)

# =========================
# üîç Aba 2 - Recomenda√ß√£o
# =========================
with abas[1]:
    st.title("üîç Recomenda√ß√£o de Candidatos para Vaga")

    # Inputs da vaga
    st.subheader("üìÑ Dados da Vaga")

    titulo_vaga = st.text_input("T√≠tulo da Vaga")

    senioridade = st.selectbox(
        "N√≠vel", 
        ["Estagi√°rio", "Auxiliar", "Assistente", "J√∫nior", "Pleno", "S√™nior", 
         "Especialista", "Coordenador", "Gerente", "Supervisor"]
    )

    area_atuacao = st.selectbox(
        "√Årea de Atua√ß√£o", 
        ["Desenvolvimento", "Dados", "Governan√ßa", "Relacionamento", "Infraestrutura", 
         "Neg√≥cio/ADM", "Projetos", "Qualidade", "SAP", "Seguran√ßa", "UX", "Outros"]
    )

    competencias = st.text_area("Compet√™ncias T√©cnicas e Comportamentais")

    nivel_academico = st.selectbox(
        "N√≠vel Acad√™mico",
        [
            'Ensino Superior Completo','Ensino Superior Incompleto', 'Ensino Superior Cursando',
            'P√≥s Gradua√ß√£o Incompleto', 'P√≥s Gradua√ß√£o Cursando', 'P√≥s Gradua√ß√£o Completo',
            'Mestrado Cursando', 'Mestrado Incompleto', 'Mestrado Completo',
            'Doutorado Cursando', 'Doutorado Incompleto', 'Doutorado Completo',
            'Ensino M√©dio Incompleto', 'Ensino M√©dio Cursando', 'Ensino M√©dio Completo',
            'Ensino T√©cnico Incompleto', 'Ensino T√©cnico Cursando', 'Ensino T√©cnico Completo',
            'Ensino Fundamental Incompleto', 'Ensino Fundamental Cursando', 'Ensino Fundamental Completo'
        ]
    )

    nivel_ingles = st.selectbox("N√≠vel de Ingl√™s", ["B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"])

    local_vaga = st.text_input("Local da Vaga (Cidade, Estado) - Ex: S√£o Paulo, S√£o Paulo")

    # Filtros de localiza√ß√£o
    st.subheader("üéØ Filtros de Localiza√ß√£o")
    filtro_local = st.checkbox('‚úÖ Mostrar apenas candidatos da mesma **CIDADE**')
    filtro_estado = st.checkbox('‚úÖ Mostrar apenas candidatos do mesmo **ESTADO**')

    vaga = {
        'titulo_vaga': titulo_vaga,
        'competencia_tecnicas_e_comportamentais': competencias,
        'nivel_academico_y': nivel_academico,
        'nivel_ingles_y': nivel_ingles,
        'senioridade_y': senioridade,
        'area_atuacao_grupo': area_atuacao,
        'local_vaga': local_vaga
    }

    if st.button("üîç Buscar Candidatos"):
        df_match = gerar_variaveis_match(df_candidatos, vaga)

        try:
            cidade_vaga = vaga['local_vaga'].split(",")[0].strip().lower()
            estado_vaga = vaga['local_vaga'].split(",")[1].strip().lower()

            df_match[['cidade_candidato', 'estado_candidato']] = df_match['local'].str.split(",", n=1, expand=True)
            df_match['cidade_candidato'] = df_match['cidade_candidato'].str.strip().str.lower()
            df_match['estado_candidato'] = df_match['estado_candidato'].str.strip().str.lower()

            if filtro_local:
                df_match = df_match[df_match['cidade_candidato'] == cidade_vaga]
            if filtro_estado:
                df_match = df_match[df_match['estado_candidato'] == estado_vaga]

        except Exception:
            st.warning("‚ö†Ô∏è Verifique se o campo 'Local da vaga' est√° no formato correto: 'Cidade, Estado'.")

        # üî• Filtro obrigat√≥rio por senioridade exata
        df_match = df_match[df_match['nivel_profissional'].str.lower() == vaga['senioridade_y'].lower()]

        # Vari√°veis do modelo
        X = df_match[[
            'area_atuacao_grupo_desenvolvimento',
            'area_atuacao_grupo_governanca',
            'area_atuacao_grupo_infraestrutura',
            'area_atuacao_grupo_nao_informado',
            'area_atuacao_grupo_negocio/adm',
            'area_atuacao_grupo_outros',
            'area_atuacao_grupo_projetos',
            'area_atuacao_grupo_qualidade',
            'area_atuacao_grupo_sap',
            'area_atuacao_grupo_seguranca',
            'area_atuacao_grupo_ux',
            'delta_academico',
            'delta_ingles',
            'delta_senioridade',
            'match_senioridade_aceitavel',
            'match_competencias_v3',
            'match_titulo_vaga_perfil_v2',
            'match_local'
        ]]

        X = X.reindex(columns=colunas_modelo, fill_value=0)

        proba = modelo.predict_proba(X)[:, 1]
        df_match['prob_contratacao'] = proba

        threshold = 0.4
        df_match['aprovado'] = (df_match['prob_contratacao'] >= threshold).astype(int)

        resultado = df_match[df_match['aprovado'] == 1].copy()
        resultado = resultado.sort_values(by='prob_contratacao', ascending=False)
        resultado = resultado.drop_duplicates(subset='codigo_candidato')

        st.subheader("‚úÖ Candidatos recomendados:")
        st.dataframe(
            resultado[['codigo_candidato', 'titulo_profissional', 'conhecimentos_tecnicos', 'local', 'prob_contratacao']].reset_index(drop=True)
        )
